#Given an array A[] of integers, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, then smaller number comes first.

#Input:
#The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

#Output:
#For each testcase, in a new line, print each sorted array in a seperate line. For each array its numbers should be seperated by space.

#Constraints:
#1 ≤ T ≤ 70
#30 ≤ N ≤ 130
#1 ≤ Ai ≤ 60 

from collections import defaultdict


def freqSort(arr, n):
    frq = defaultdict(int)

    for e in arr:
        frq[e] += 1

    ans = [(e, frq[e]) for e in arr]
    ans.sort()
    ans.sort(key=lambda x: x[1],reverse=True)

    for e in ans:
        print(e[0],end=' ')



if __name__ == '__main__':
    T = int(input())

    for _ in range(T):
        n = int(input())
        arr = [int(x) for x in input().split()]

        freqSort(arr, n)
        print()
